using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace osu_viewer
{
    [Serializable()]
    public class OsuSong 
    {                

        public struct SearchParameters
        {
            public int Count;
            public string Title;
            public string Artist;
            public string Creator;
            public string Source;
            public string Tags;
            public string[] all;
        }

        static SearchParameters searchPars;
        static char[] stringSeparatorsDot = { ',' };
        static char[] stringSeparatorsSpace = { ' ' };
        static char[] stringSeparatorsEquals = { '=' };

        public String Title
        {
            get { return (TitleUnicode != null && TitleUnicode != "") ? TitleUnicode : TitleASCII; }
        }
        public String Artist
        {
            get { return (ArtistUnicode != null && ArtistUnicode != "") ? ArtistUnicode : ArtistASCII; }
        }
        public String OsuFilename { get; private set; }
        public String TitleASCII { get; private set; }
        public String TitleUnicode { get; private set; }
        public String AudioFilename { get; private set; }
        public String ArtistASCII { get; private set; }
        public String ArtistUnicode { get; private set; }
        public String Creator { get; private set; }
        public String Source { get; private set; }
        public String Tags { get; private set; }
        public String BeatmapSetID { get; private set; }
        public int PreviewTime { get; private set; }
        public WMPLib.IWMPMedia Media { get {
                return File.Exists(AudioFilename) ? Form_Main.wmp_factory.newMedia(AudioFilename) : null;                
            } }

        public static bool UNICODE = true;
        
        public OsuSong(string title)
        {
            TitleASCII = title;
            AudioFilename = title;
            OsuFilename = title;
        }

        public OsuSong(FileInfo file)
        {
            OsuFilename = file.FullName;

            StreamReader sr = file.OpenText();
            bool General = false, Metadata = false;

            String tmp;
            String[] infos;
            while((tmp = sr.ReadLine()) != null)
            {
                if (!(General && Metadata))
                {
                    if (tmp == "[General]")
                        General = true;
                    else if (tmp == "[Metadata]")
                        Metadata = true;
                }
                else if (tmp.StartsWith("[")) break;

                if (General || Metadata)
                {
                    if ((infos = tmp.Split(':')).Length > 0)
                    {
                        switch (infos[0])
                        {
                            case "Title":
                                TitleASCII = infos[1].Trim();
                                break;
                            case "TitleUnicode":
                                TitleUnicode = infos[1].Trim();
                                break;
                            case "AudioFilename":
                                AudioFilename = file.DirectoryName + "\\" + infos[1].Trim();
                                break;
                            case "Artist":
                                ArtistASCII = infos[1].Trim();
                                break;
                            case "ArtistUnicode":
                                ArtistUnicode = infos[1].Trim();
                                break;
                            case "Creator":
                                Creator = infos[1].Trim();
                                break;
                            case "Source":
                                Source = infos[1].Trim();
                                break;
                            case "Tags":
                                Tags = infos[1].Trim();
                                break;
                            case "BeatmapSetID":
                                BeatmapSetID = infos[1].Trim();
                                break;
                            case "PreviewTime":
                                PreviewTime = Convert.ToInt32(infos[1].Trim());
                                break;
                        }
                    }
                }
            }
            sr.Close();
        }

        private static void clearSearchPars()
        {
            searchPars.Title = null;
            searchPars.Artist = null;
            searchPars.Creator = null;
            searchPars.Source = null;
            searchPars.Tags = null;
            searchPars.all = null;
        }

        public static void setSearchPars(string str)
        {
            clearSearchPars();
            string[] cmds = str.ToLower().Split(stringSeparatorsDot, StringSplitOptions.RemoveEmptyEntries);
            int count = 0;
            foreach (string s in cmds)
            {
                if (s.Trim() == "") continue;
                string[] tmp = s.Trim().Split(stringSeparatorsEquals);
                switch (tmp[0])
                {
                    case "title":
                        if (tmp.Length != 1) {
                            searchPars.Title = tmp[1].Trim();
                        }
                        else searchPars.all = s.Trim().Split(stringSeparatorsSpace, StringSplitOptions.RemoveEmptyEntries);
                        count++;
                        break;
                    case "artist":
                        if (tmp.Length != 1)
                        {
                            searchPars.Artist = tmp[1].Trim();                            
                        }
                        else searchPars.all = s.Trim().Split(stringSeparatorsSpace, StringSplitOptions.RemoveEmptyEntries);
                        count++;
                        break;
                    case "creator":
                        if (tmp.Length != 1)
                        {
                            searchPars.Creator = tmp[1].Trim();
                        }
                        else searchPars.all = s.Trim().Split(stringSeparatorsSpace, StringSplitOptions.RemoveEmptyEntries);
                        count++;
                        break;
                    case "source":
                        if (tmp.Length != 1)
                        {
                            searchPars.Source = tmp[1].Trim();
                        }
                        else searchPars.all = s.Trim().Split(stringSeparatorsSpace, StringSplitOptions.RemoveEmptyEntries);
                        count++;
                        break;
                    case "tags":
                        if (tmp.Length != 1)
                        {
                            searchPars.Tags = tmp[1].Trim();
                        }
                        else searchPars.all = s.Trim().Split(stringSeparatorsSpace, StringSplitOptions.RemoveEmptyEntries);
                        count++;
                        break;
                    default:
                        searchPars.all = s.Trim().Split(stringSeparatorsSpace, StringSplitOptions.RemoveEmptyEntries);
                        count++;
                        break;
                }
                searchPars.Count = count;
            }
        }

        //old_None_Used
        public bool isAbout(string str)
        {
            string[] strs = str.Split(' ');
            foreach (string s in strs)
            {
                if (TitleASCII != null && TitleASCII.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
                if (TitleUnicode != null && TitleUnicode.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
                if (ArtistASCII != null && ArtistASCII.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
                if (ArtistUnicode != null && ArtistUnicode.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
                if (Creator != null && Creator.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
                if (Source != null && Source.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
                if (Tags != null && Tags.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
            }
            return false;
        }

        //搜尋 => 符合一項條件以上
        public bool isAbout()
        {
            if (searchPars.Title != null && (
                (TitleASCII != null && TitleASCII.IndexOf(searchPars.Title, StringComparison.OrdinalIgnoreCase) != -1) 
                || (TitleUnicode != null && TitleUnicode.IndexOf(searchPars.Title, StringComparison.OrdinalIgnoreCase) != -1)
                ))
                return true;

            if (searchPars.Artist != null && (
                (ArtistASCII != null && ArtistASCII.IndexOf(searchPars.Artist, StringComparison.OrdinalIgnoreCase) != -1)
                || (ArtistUnicode != null && ArtistUnicode.IndexOf(searchPars.Artist, StringComparison.OrdinalIgnoreCase) != -1)
                ))
                return true;

            if (searchPars.Creator != null && Creator != null && Creator.IndexOf(searchPars.Creator, StringComparison.OrdinalIgnoreCase) != -1)
                return true;

            if (searchPars.Source != null && Source != null && Source.IndexOf(searchPars.Source, StringComparison.OrdinalIgnoreCase) != -1)
                return true;

            if (searchPars.Tags != null && Tags != null && Tags.IndexOf(searchPars.Tags, StringComparison.OrdinalIgnoreCase) != -1)
                return true;

            if (searchPars.all != null)
            {
                foreach (string s in searchPars.all)
                {
                    if (TitleASCII != null && TitleASCII.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
                    if (TitleUnicode != null && TitleUnicode.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
                    if (ArtistASCII != null && ArtistASCII.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
                    if (ArtistUnicode != null && ArtistUnicode.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
                    if (Creator != null && Creator.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
                    if (Source != null && Source.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
                    if (Tags != null && Tags.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) return true;
                }
            }

            return false;
        }

        //搜尋 => 符合全部條件
        public bool isAbout(bool value)
        {
            int count = 0;
            if (searchPars.Title != null && (
                (TitleASCII != null && compareTo(TitleASCII, searchPars.Title))
                || (TitleUnicode != null && compareTo(TitleUnicode, searchPars.Title))
                ))
                if (++count == searchPars.Count) return true;

            if (searchPars.Artist != null && (
                (ArtistASCII != null && compareTo(ArtistASCII, searchPars.Artist))
                || (ArtistUnicode != null && compareTo(ArtistUnicode, searchPars.Artist))
                ))
                if (++count == searchPars.Count) return true;

            if (searchPars.Creator != null && Creator != null && compareTo(Creator, searchPars.Creator))
                if (++count == searchPars.Count) return true;

            if (searchPars.Source != null && Source != null && compareTo(Source, searchPars.Source))
                if (++count == searchPars.Count) return true;

            if (searchPars.Tags != null && Tags != null && compareTo(Tags, searchPars.Tags))
                if (++count == searchPars.Count) return true;

            if (searchPars.all != null)
            {
                foreach (string s in searchPars.all)
                {
                    if (TitleASCII != null && TitleASCII.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) { count++; break; }
                    if (TitleUnicode != null && TitleUnicode.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) { count++; break; }
                    if (ArtistASCII != null && ArtistASCII.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) { count++; break; }
                    if (ArtistUnicode != null && ArtistUnicode.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) { count++; break; }
                    if (Creator != null && Creator.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) { count++; break; }
                    if (Source != null && Source.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) { count++; break; }
                    if (Tags != null && Tags.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1) { count++; break; }
                }
            }

            if (count == searchPars.Count) return true;
            return false;
        }

        private bool compareTo(string str, string pars)
        {
            string[] tmp = pars.Split(stringSeparatorsSpace);
            int count = 0;
            foreach (string s in tmp)
            {
                if (str.IndexOf(s, StringComparison.OrdinalIgnoreCase) != -1)
                    if (++count == tmp.Length) return true;
            }

            return false;
        }

        public override string ToString()
        {
            if (TitleASCII == null && TitleUnicode == null) return "# Title No Found #";
            else return UNICODE ? Title : TitleASCII;
        }

    }    
}
